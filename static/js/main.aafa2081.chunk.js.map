{"version":3,"sources":["components/Wrapper/index.jsx","components/Cards/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Images","onClick","handleClick","id","alt","name","src","image","App","state","pictures","score","bestScore","images","shuffle","console","log","i","j","temp","_this","length","Math","floor","random","setState","clickedImage","includes","gameReset","push","_this2","this","Fragment","class","components_Wrapper","map","picture","Cards","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0wDAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,uBC8B1BC,MA9Bf,SAAgBN,GACd,OAGEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAGXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMP,EAAMQ,YAAYR,EAAMS,MAI7CR,EAAAC,EAAAC,cAAA,OAAKO,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,mBCmH5BC,6MAvHbC,MAAQ,CACNC,WACAC,MAAO,EACPC,UAAW,EACXC,OAAQ,MAIVC,QAAU,WACRC,QAAQC,IAAI,aACZ,IACIC,EACFC,EACAC,EAHIT,EAAWU,EAAKX,MAAMC,SAI5B,IAAKO,EAAIP,EAASW,OAAS,EAAGJ,EAAI,EAAGA,IACnCC,EAAII,KAAKC,MAAMD,KAAKE,UAAYP,EAAI,IACpCE,EAAOT,EAASO,GAChBP,EAASO,GAAKP,EAASQ,GACvBR,EAASQ,GAAKC,EAGhB,OADAJ,QAAQC,IAAIN,GACLU,EAAKK,SAAS,CAAEf,gBAGzBR,YAAc,SAACwB,GAEb,IAAMb,EAASO,EAAKX,MAAMI,OAEpBH,EAAWU,EAAKX,MAAMC,SAE5BK,QAAQC,IAAIN,EAASP,IAMrB,IAAI,IAAIc,EAAI,EAAGA,EAAIJ,EAAOQ,OAAQJ,IAG9B,GAAGJ,EAAOc,SAASD,GAGjB,OAFAN,EAAKQ,iBACLR,EAAKK,SAAS,CAAEd,MAAO,IAavBE,EAAOgB,KAAKH,GACZX,QAAQC,IAAIU,GACZN,EAAKK,SAAS,CAAGZ,WACvBO,EAAKK,SAAS,CAAEd,MAAOS,EAAKX,MAAME,MAAQ,IAC1CS,EAAKN,UACLC,QAAQC,IAAIH,MAMde,UAAY,WACV,IAAIjB,EAAQS,EAAKX,MAAME,MACnBC,EAAYQ,EAAKX,MAAMG,UAE3BA,EAAYD,EAAQC,EAAYD,EAAQC,EAExCQ,EAAKK,SAAS,CACZd,QACAC,YACAC,OAAQ,8EAOH,IAAAiB,EAAAC,KACP,OACEpC,EAAAC,EAAAC,cAACF,EAAAC,EAAMoC,SAAP,KACErC,EAAAC,EAAAC,cAACF,EAAAC,EAAMoC,SAAP,KACErC,EAAAC,EAAAC,cAAA,OAAKoC,MAAM,gCACTtC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,UAA+CiC,KAAKtB,MAAME,OAC1DhB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,gBAAqDiC,KAAKtB,MAAMG,aAIpEjB,EAAAC,EAAAC,cAACqC,EAAD,KAAUH,KAAKtB,MAAMC,SAASyB,IAAI,SAAAC,GAAO,OAEvCzC,EAAAC,EAAAC,cAACwC,EAAD,CAGEC,IAAKF,EAAQjC,GACbA,GAAIiC,EAAQjC,GACZI,MAAO6B,EAAQ7B,MACfO,QAASgB,EAAKhB,QACdZ,YAAa4B,EAAK5B,yBAtGZqC,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aafa2081.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\"\n// import pictures from '../src/images.json'\n\nfunction Images(props) {\n  return (\n\n\n    <div className=\"card\">\n      \n\n        <div className=\"img-container\">\n        <button onClick={() => props.handleClick(props.id)}>\n\n\n\n          <img alt={props.name} src={props.image} />\n          </button>\n        </div>\n        \n      \n    </div>\n\n\n\n\n\n\n  )\n}\n\n\n\n\nexport default Images;","import React from 'react';\n\nimport Wrapper from \"./components/Wrapper\";\n\nimport './App.css';\nimport Images from \"./components/Cards\";\nimport pictures from '../src/images.json'\n\n\n\nclass App extends React.Component {\n\n  state = {\n    pictures,\n    score: 0,\n    bestScore: 0,\n    images: []\n\n  }\n\n  shuffle = () => {\n    console.log('shuffling');\n    const pictures = this.state.pictures;\n    let i,\n      j,\n      temp;\n    for (i = pictures.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      temp = pictures[i];\n      pictures[i] = pictures[j];\n      pictures[j] = temp;\n    }\n    console.log(pictures)\n    return this.setState({ pictures })\n  }\n\n  handleClick = (clickedImage) => {\n\n    const images = this.state.images\n    \n    const pictures = this.state.pictures\n    \n    console.log(pictures.id)\n    \n    \n    \n    \n    \n    for(let i = 0; i < images.length; i++)\n    {\n       \n        if(images.includes(clickedImage)){\n          this.gameReset()\n          this.setState({ score: 0 })\n          return;\n       \n        }\n       \n      \n      }\n       \n  \n  \n    \n    \n          \n          images.push(clickedImage)\n          console.log(clickedImage)\n          this.setState({  images  })\n    this.setState({ score: this.state.score + 1 })\n    this.shuffle();\n    console.log(images)\n\n    \n\n  }\n\n  gameReset = () => {\n    let score = this.state.score\n    let bestScore = this.state.bestScore\n    \n    bestScore = score > bestScore ? score : bestScore;\n\n    this.setState({\n      score,\n      bestScore,\n      images: [],\n    });\n  }\n\n  \n\n\n  render() {\n    return (\n      <React.Fragment>\n        <React.Fragment>\n          <nav class=\"navbar navbar-light bg-light\">\n            <span className=\"navbar-brand mb-0 h1\">Score: {this.state.score}</span>\n            <span className=\"navbar-brand mb-0 h1\"> Best Score: {this.state.bestScore}</span>\n          </nav>\n        </React.Fragment>\n\n        <Wrapper>{this.state.pictures.map(picture => (\n\n          <Images\n\n\n            key={picture.id}\n            id={picture.id}\n            image={picture.image}\n            shuffle={this.shuffle}\n            handleClick={this.handleClick}\n\n          />\n        ))}\n\n        </Wrapper>\n\n\n      </React.Fragment>\n\n\n\n\n    )\n  }\n}\n\n\n\nexport default App;\n\n\n// handleClick method\n// -- make hc a prop = this.handleclick\n// -- pass into the onClick on image component. \n\n// Handleclick\n// empty array in state called images. ==> all images user clicks on. \n// 1.Check if what the users clicked on is already in the images array array.find. or looping. \n// 2. if its true, games over.\n// 3. check if current score, better than best. \n// - if it is, set current score to best score.\n// 4. push to image array if its not in the array.\n// 5. increment score by 1. \n// 6. call this.shuffle. \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}